#! /usr/bin/env python

from __future__ import print_function

import sys
import math
import rospy
from visualization_msgs.msg import Marker
from geometry_msgs.msg import Point
from std_msgs.msg import ColorRGBA
from kdl_parser_py import urdf
import PyKDL

# change this to change the size of spheres and distance between them
SPHERE_DIST = 0.4

def get_chain_from_param(param_name):
    success, tree = urdf.treeFromParam(param_name)
    if not success:
        rospy.logfatal('Could not get tree from ros param')
        sys.exit(1)
    chain = tree.getChain('base_link', 'end_effector')
    if chain is None:
        rospy.logfatal('Could not get chain from tree')
        sys.exit(1)
    return chain

def get_fk_pose_reachability(chain, joint_limits):
    joint = PyKDL.JntArray(len(joint_limits))
    fk = PyKDL.ChainFkSolverPos_recursive(chain)
    reachability = []
    offset = 0.2
    joint[0] = joint_limits[0][0]
    while joint[0] < joint_limits[0][1]:
        joint[1] = joint_limits[1][0]
        while joint[1] < joint_limits[1][1]:
            joint[2] = joint_limits[2][0]
            while joint[2] < joint_limits[2][1]:
                cart_pose = PyKDL.Frame()
                fk.JntToCart(joint, cart_pose)
                reachability.append((cart_pose.p[0], cart_pose.p[1], cart_pose.p[2]))
                joint[2] += offset
            joint[1] += offset
        joint[0] += offset
    return reachability

def main():
    joint_limits = ((-3.13, 3.13), (-2.13, 2.13), (-2.0, 2.0))

    chain = get_chain_from_param('/robot_description')
    if chain.getNrOfJoints() != len(joint_limits):
        rospy.logfatal('Number of joints are mismatching. Exiting.')
        sys.exit(1)

    pose_reachability = get_fk_pose_reachability(chain, joint_limits)

    pub = rospy.Publisher('/reachability', Marker, queue_size=1)
    rospy.sleep(0.5)


    cart_limits = ((-1.0, 1.0), (-1.0, 1.0), (-0.3, 1.5))
    offset = SPHERE_DIST
    ranges = [int(math.ceil((cart_limit[1]-cart_limit[0])/offset)) for cart_limit in cart_limits]
    reachability_count = []
    for i in range(ranges[0]):
        reachability_count.append([])
        for j in range(ranges[1]):
            reachability_count[i].append([])
            for k in range(ranges[2]):
                reachability_count[i][j].append(0)

    
    for point in pose_reachability:
        block_offset = [point[i] - cart_limits[i][0] for i in range(3)]
        block_index = [int(math.floor(block_offset[i]/offset)) for i in range(3)]
        reachability_count[block_index[0]][block_index[1]][block_index[2]] += 1

    max_count = 0
    for i in range(ranges[0]):
        for j in range(ranges[1]):
            if max(reachability_count[i][j]) > max_count:
                    max_count = max(reachability_count[i][j])
    color_partition = 10
    scale = offset*0.7

    msg = Marker()
    msg.header.frame_id = 'base_link'
    msg.header.stamp = rospy.Time.now()
    msg.ns = 'point_sphere'
    msg.action = Marker.ADD
    msg.pose.orientation.w = 1.0
    msg.type = Marker.SPHERE_LIST
    msg.scale.x = scale
    msg.scale.y = scale
    msg.scale.z = scale
    radius = 0.1
    for i in range(ranges[0]):
        for j in range(ranges[1]):
            for k in range(ranges[2]):
                if reachability_count[i][j][k] == 0:
                    continue
                x = (cart_limits[0][0] + (i+0.5)*offset)
                y = (cart_limits[1][0] + (j+0.5)*offset)
                z = (cart_limits[2][0] + (k+0.5)*offset)
                msg.points.append(Point(x=x, y=y, z=z))
                ratio = float((reachability_count[i][j][k]*color_partition)/max_count)/color_partition
                # msg.colors.append(ColorRGBA(r=ratio, g=1.0-ratio, b=0.0, a=0.2))
                msg.colors.append(ColorRGBA(r=ratio, g=1.0-ratio, b=0.0, a=0.2+ratio*0.6))
    pub.publish(msg)
    rospy.sleep(0.5)
    

if __name__ == "__main__":
    rospy.init_node('reachability')
    main()
